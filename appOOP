const { Console } = require("console-mpds");
const console = new Console();
playMastermind();
//mastermind2().play();//todo

function mastermind2(){
    return {
        play: function(){
            //todo
        }
    }
}

function playMastermind() { //todo not function, is class
    let resume = createYesNoDialog();
    do {
        playGame();
        resume.read("Â¿Play again?");
    } while (resume.isAffirmative());

    function playGame() {
        let game = createGame();
        let board = createBoard(game);
        game.init();
        board.showIntroMessage();
        do {
            board.showAttempts();
            board.askForProposedCombination();
            board.incrementAttempts();
            game.isWinner(board);
        } while (!game.isEnded());

        function createGame() {
            return {
                ATTEMPTS_MAX_LENGTH: 10,
                COMBINATION_LENGTH: 4,
                winner: false,
                secretCombination: createCombination(),

                init: function () {
                    this.secretCombination.generateSecretCombination();
                },

                isEnded: function () {
                    return this.attempts.length >= this.ATTEMPTS_MAX_LENGTH || this.winner === true;
                },

                isWinner: function (board) {
                    return this.secretCombination.howManyColorsInSamePosition(board.proposedCombination) === this.secretCombination.length;
                }
            }
        }

        function createBoard(game) {
            return {
                MESSAGE_MASTERMIND: "-----MASTERMIND------\n",
                MESSAGE_ASTERISCS: "****",
                MESSAGE_ATTEMPTS: " attempt(s):",
                MESSAGE_ARROW: " --> ",
                MESSAGE_BLACKS: " blacks and ",
                MESSAGE_WHITES: " whites",
                attempts: [],
                COLORS: Colors().getColors(),
                proposedCombination: createCombination(COLORS),
    
                showIntroMessage: function () {
                    console.writeln(this.MESSAGE_MASTERMIND);
                    console.writeln("traza secret: " + game.secretCombination.toString());
                },
    
                showAttempts: function () {
                    console.writeln(this.attempts.length + this.MESSAGE_ATTEMPTS);
                    console.writeln(this.MESSAGE_ASTERISCS);
                    for (let i = 0; i < this.attempts.length; i++) {
                        console.writeln(this.attempts[i].toString()
                            + this.MESSAGE_ARROW
                            + this.attempts[i].howManyColorsInSamePosition(game.secretCombination)
                            + this.MESSAGE_BLACKS
                            + this.attempts[i].howManyColorsInDiferentPosition(game.secretCombination)
                            + this.MESSAGE_WHITES);
                    }
                },
    
                incrementAttempts: function () {
                    this.attempts[this.attempts.length] = this.proposedCombination;
                },
    
                askForProposedCombination: function () { //crear clase attempt
                    let errors = [];
                    let errorCodes = this.errorCodes();
                    do {
                        this.proposedCombination.setColors(console.readString("Proposed Combination: "));
                        if (!this.proposedCombination.isValidLength()) {
                            errors[errors.length] = errorCodes.WRONG_LENGTH_ERROR;
                        }
                        if (!this.proposedCombination.isValidColors()) {
                            errors[errors.length] = errorCodes.WRONG_COLOR_ERROR;
                        }
                        if (!this.proposedCombination.isUniqueColors()) {
                            errors[errors.length] = errorCodes.REPEATED_COLOR_ERROR;
                        }
                        this.showProposedInputErrors(errors);
                    } while (errors.length != 0);
                },
    
                errorCodes: function () {
                    return {
                        WRONG_LENGTH_ERROR: `Wrong proposed combination length`,
                        WRONG_COLOR_ERROR: `Wrong colors, they must be: ${this.COLORS}`,
                        REPEATED_COLOR_ERROR: `Wrong proposed combination, at least one color is repeated`
                    }
                },
    
                showProposedInputErrors: function (errors) {
                    for (let i = 0; i < errors.length; i++) {
                        console.writeln("error: " + errors[i]);
                    }
                }
            }
        }

        function createProposedCombination(){ //todo separar combination de secret y propo...
            return {
                VALID_COLORS: createColors(),
                COMBINATION_LENGTH: 4,
                colors: "",

                toString: function () {
                    return this.colors;
                }
            }
        }

        function createCombination(validColors) {
            return {
                VALID_COLORS: validColors,
                COMBINATION_LENGTH: 4,
                colors: "",

                toString: function () {
                    return this.colors;
                },

                generateSecretCombination: function () {
                    let secretCombination = "";
                    for (let i = 0; i < this.COMBINATION_LENGTH; i++) {
                        let repeated;
                        do {
                            let randomColor = this.VALID_COLORS[parseInt(Math.random() * this.VALID_COLORS.length)];
                            repeated = this.searchColor(randomColor, secretCombination);
                            if (!repeated) {
                                secretCombination += randomColor;
                            }
                        } while (repeated);
                    }
                    this.colors = secretCombination;
                },

                isUniqueColors: function () {
                    let uniqueColor = true;
                    for (let i = 0; uniqueColor && i < this.colors.length; i++) {
                        for (let j = i + 1; uniqueColor && j < this.colors.length; j++) {
                            uniqueColor = this.colors[j] !== this.colors[i];
                        }
                    }
                    return uniqueColor;
                },

                searchColor: function (color, colors) {
                    for (let i = 0; i < colors.length; i++) {
                        if (colors[i] === color) {
                            return true;
                        }
                    }
                    return false;
                },

                isValidLength: function () {
                    return this.colors.length === game.COMBINATION_LENGTH;
                },

                isValidColors: function () {
                    let validColor = true;
                    for (let i = 0; validColor && i < this.colors.length; i++) {
                        validColor = this.searchColor(this.colors[i], this.VALID_COLORS);
                    }
                },

                setColors: function (colors) {
                    this.colors = colors;
                },

                howManyColorsInSamePosition: function (combination) {//todo implement logic
                    return 2;
                },

                howManyColorsInDiferentPosition: function (combination) {//todo implement logic
                    return 3;
                }
            }
        };
    }


    function Colors(){ //a falta de enumerados
        return{
            validColors: "rgbym",
            getColors: function(){
                this.validColors;
            }
        }
    }

    function createYesNoDialog() {
        return {
            YES: "yes",
            NO: "no",
            response: "",
            error: false,

            read: function (question) {
                do {
                    this.response = console.readString(question);
                    this.error = this.response != this.YES && this.response != this.NO;
                    if (this.error) {
                        console.writeln("response must be " + this.YES + " or " + this.NO);
                    }
                } while (this.error);
                return this.response;
            },

            isAffirmative: function () {
                return this.response === this.YES;
            }
        }
    }


}